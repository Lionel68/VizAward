# addTiles("https://api.mapbox.com/styles/v1/mapbox/streets-v9/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1IjoibGlvbmVsNjgiLCJhIjoiY2lyOHVtY2ZqMDAycmlsbHd3cXF4azhzdiJ9.FHJtGBW1bhjCr-JLnC4brw",
#         option=tileOptions(minZoom=13,maxZoom=18)) %>%
addPolylines(data=bus_line_list[[1]],stroke=TRUE,color=col_line(1),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[2]],stroke=TRUE,color=col_line(2),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[3]],stroke=TRUE,color=col_line(3),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[4]],stroke=TRUE,color=col_line(4),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[5]],stroke=TRUE,color=col_line(5),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[6]],stroke=TRUE,color=col_line(6),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[7]],stroke=TRUE,color=col_line(7),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[8]],stroke=TRUE,color=col_line(8),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[9]],stroke=TRUE,color=col_line(9),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[10]],stroke=TRUE,color=col_line(10),noClip=FALSE,opacity = opacity_bus_lines)
install.packages("devtools")
library(leaflet)
library(plyr)
library(dplyr)
library(devtools)
leaflet() %>%
setView(lng=8.774149, lat=50.810685,zoom = 14)%>%
addTiles("https://api.mapbox.com/styles/v1/mapbox/streets-v9/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1IjoibGlvbmVsNjgiLCJhIjoiY2lyOHVtY2ZqMDAycmlsbHd3cXF4azhzdiJ9.FHJtGBW1bhjCr-JLnC4brw",
option=tileOptions(minZoom=13,maxZoom=18)) %>%
addAwesomeMarkers(data=busstop_new,lng=~Longitude,lat=~Latitude,popup=~Tag)
install_github("http://rstudio.github.io/leaflet")
install_github("rstudio/leaflet")
leaflet() %>%
setView(lng=8.774149, lat=50.810685,zoom = 14)%>%
addTiles("https://api.mapbox.com/styles/v1/mapbox/streets-v9/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1IjoibGlvbmVsNjgiLCJhIjoiY2lyOHVtY2ZqMDAycmlsbHd3cXF4azhzdiJ9.FHJtGBW1bhjCr-JLnC4brw",
option=tileOptions(minZoom=13,maxZoom=18)) %>%
addAwesomeMarkers(data=busstop_new,lng=~Longitude,lat=~Latitude,popup=~Tag)%>%
addPolylines(data=bus_line_list[[1]],stroke=TRUE,color=col_line(1),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[2]],stroke=TRUE,color=col_line(2),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[3]],stroke=TRUE,color=col_line(3),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[4]],stroke=TRUE,color=col_line(4),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[5]],stroke=TRUE,color=col_line(5),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[6]],stroke=TRUE,color=col_line(6),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[7]],stroke=TRUE,color=col_line(7),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[8]],stroke=TRUE,color=col_line(8),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[9]],stroke=TRUE,color=col_line(9),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[10]],stroke=TRUE,color=col_line(10),noClip=FALSE,opacity = opacity_bus_lines)
busstop_new
library(plyr)
library(dplyr)
library(tidyr) # more data management
busstop_tmp
csv_file.df
csv_file.tbl
stores
csv_file.tbl <- tbl_df(csv_file.df)
csv_file.tbl %>% mutate(StoreID = paste("Store",row.names(csv_file.df),sep = "_")) %>%
mutate(Longitude = longitude) %>% mutate(Latitude = latitude) %>% mutate(Group = category) %>%
mutate(Labels = name) %>%
dplyr::select(one_of(c("StoreID","Longitude", "Latitude", "Group","Labels"))) -> stores
#rename some categories
stores$Group<-as.character(stores$Group)
stores$Group[stores$Group=="food"]<-"supermarket"
stores$Labels<-as.character(stores$Labels)
#remove bad names
stores<-stores[validUTF8(stores$Labels),]
stores<-stores[validEnc(stores$Labels),]
#remove category other essentials
stores<-subset(stores,Group!="other_essentials")
#remove duplicated points
stores<-stores[-which(duplicated(stores[,c("Longitude","Latitude")])),]
# Repeat selection of spatialPointsDataframe
csv.spdf[validUTF8(as.character(csv.spdf$name)),] -> stores.sp
stores.sp[validUTF8(as.character(stores.sp$name)),] -> stores.sp
#remove category other essentials
stores.sp<-subset(stores.sp,stores.sp$category!="other_essentials")
#remove duplicated points
stores.sp<-stores.sp[-which(duplicated(stores.sp@coords[,c("longitude","latitude")])),]
###--------------------------------------------------------------------------------------
### II. Prepare the bus stop data
# Look at the busstop data
str(busstops_sel)
head(busstops_sel@coords)
dim(busstops_sel@coords)
# Remove busstops without proper names
busstops_sel[substr(busstops_sel$name,1,4)!="node",] -> busstops_subset
dim(busstops_subset@coords)
# convert into data.frame
busstops_subset.df <- as.data.frame(busstops_subset)
str(busstops_subset.df)
# Clean up the data using the tbl class used by dplyr and tidyr
busstops_subset.df %>% mutate(BusStopID = paste("Stop",row.names(busstops_subset.df),sep = "_")) %>%
mutate(Longitude = coords.x1) %>% mutate(Latitude = coords.x2 ) %>%
mutate(BusStopName = name) %>%
dplyr::select(one_of(c("BusStopID","Longitude", "Latitude", "BusStopName"))) -> busstops_subset.df
busstops_subset.df$BusStopName <- factor(busstops_subset.df$BusStopName)
str(busstops_subset.df)
#correct bus stop name "Marburg"
busstops_nearest[6,"BusStopName"]<-"Pommernweg"
busstops_nearest[42,"BusStopName"]<-"Elisabethenhof"
busstops_nearest[74,"BusStopName"]<-"Ginseldorfer Weg"
busstops_nearest[33,"BusStopName"]<-"Afföllerstraße"
busstops_nearest[13,"BusStopName"]<-"Am Kaufmarkt"
busstops_nearest<-busstops_nearest[-which(busstops_nearest$BusStopName=="Marburg"),]
#average coords for bus stops with multiple lines (like Hauptbahnof, A1)
busstops_nearest$BusStopName<-as.character(busstops_nearest$BusStopName)
busstops_nearest$Name2<-sapply(strsplit(busstops_nearest$BusStopName,split = ","),function(x) x[1])
busstops_nearest[busstops_nearest$Name2=="Marburg","Name2"]<-"Marburg, Fernbusstation"
busstops_nearest%>%
group_by(Name2)%>%
summarise(Longitude=mean(Longitude),Latitude=mean(Latitude),Lines=toString(Lines))->busstop_new
busstop_new$BusStopID<-paste("Stop",1:50)
busstops_subset<-as.data.frame(busstop_new)
coordinates(busstops_subset)<-busstops_subset[,c("Longitude","Latitude")]
proj4string(busstops_subset)<-proj4string(bus_line_list[[1]])
#add link to HTML page
pages<-readLines("~/Desktop/bus_pages.txt") #this is just a file with the bus stops where extra infos is available
busstop_new$Tag<-busstop_new$Name2
for(i in which(busstop_new$Tag%in%pages)){
busstop_new$Tag[i]<-paste0("<b><a href='http://stadtwerke-marburg.de/fileadmin/media/stadtverkehr/haltest/",busstop_new[i,"Tag"],".pdf'>",busstop_new[i,"Tag"],"</a></b>")
}
busstop_new$Tag[5]<-"<b><a href='http://stadtwerke-marburg.de/fileadmin/media/stadtverkehr/haltest/Botanischer_Garten.pdf'>Botanischer Garten</a></b>"
busstop_new$Tag[24]<-"<b><a href='http://stadtwerke-marburg.de/fileadmin/media/stadtverkehr/haltest/Bahnhofstraße.pdf'>Bahnhofstraße</a></b>"
busstop_new$Tag[35]<-"<b><a href='http://stadtwerke-marburg.de/fileadmin/media/stadtverkehr/haltest/Rudolphsplatz_Stadthalle.pdf'>Rudolphplatz</a></b>"
bus_sp<-as.data.frame(busstop_new)
coordinates(bus_sp)<-bus_sp[,c("Longitude","Latitude")]
proj4string(bus_sp)<-proj4string(bus_line_list[[1]])
csv_file.tbl <- tbl_df(csv_file.df)
csv_file.tbl %>% mutate(StoreID = paste("Store",row.names(csv_file.df),sep = "_")) %>%
mutate(Longitude = longitude) %>% mutate(Latitude = latitude) %>% mutate(Group = category) %>%
mutate(Labels = name) %>%
dplyr::select(one_of(c("StoreID","Longitude", "Latitude", "Group","Labels"))) -> stores
stores$Group<-as.character(stores$Group)
stores$Group[stores$Group=="food"]<-"supermarket"
stores$Labels<-as.character(stores$Labels)
stores<-stores[validUTF8(stores$Labels),]
stores<-stores[validEnc(stores$Labels),]
stores<-subset(stores,Group!="other_essentials")
#remove duplicated points
stores<-stores[-which(duplicated(stores[,c("Longitude","Latitude")])),]
csv.spdf[validUTF8(as.character(csv.spdf$name)),] -> stores.sp
stores.sp[validUTF8(as.character(stores.sp$name)),] -> stores.sp
stores.sp<-subset(stores.sp,stores.sp$category!="other_essentials")
stores.sp<-stores.sp[-which(duplicated(stores.sp@coords[,c("longitude","latitude")])),]
str(busstops_sel)
head(busstops_sel@coords)
dim(busstops_sel@coords)
busstops_sel[substr(busstops_sel$name,1,4)!="node",] -> busstops_subset
dim(busstops_subset@coords)
busstops_subset.df <- as.data.frame(busstops_subset)
str(busstops_subset.df)
busstops_subset.df %>% mutate(BusStopID = paste("Stop",row.names(busstops_subset.df),sep = "_")) %>%
mutate(Longitude = coords.x1) %>% mutate(Latitude = coords.x2 ) %>%
mutate(BusStopName = name) %>%
dplyr::select(one_of(c("BusStopID","Longitude", "Latitude", "BusStopName"))) -> busstops_subset.df
busstops_subset.df$BusStopName <- factor(busstops_subset.df$BusStopName)
str(busstops_subset.df)
busstops_nearest[6,"BusStopName"]<-"Pommernweg"
busstops_nearest[42,"BusStopName"]<-"Elisabethenhof"
busstops_nearest[74,"BusStopName"]<-"Ginseldorfer Weg"
busstops_nearest[33,"BusStopName"]<-"Afföllerstraße"
busstops_nearest[13,"BusStopName"]<-"Am Kaufmarkt"
busstops_nearest<-busstops_nearest[-which(busstops_nearest$BusStopName=="Marburg"),]
busstops_nearest$BusStopName<-as.character(busstops_nearest$BusStopName)
busstops_nearest$Name2<-sapply(strsplit(busstops_nearest$BusStopName,split = ","),function(x) x[1])
busstops_nearest[busstops_nearest$Name2=="Marburg","Name2"]<-"Marburg, Fernbusstation"
busstops_nearest%>%
which(busstops_nearest$BusStopName=="Marburg")
busstops_nearest$BusStopName<-as.character(busstops_nearest$BusStopName)
busstops_nearest$Name2<-sapply(strsplit(busstops_nearest$BusStopName,split = ","),function(x) x[1])
busstops_nearest[busstops_nearest$Name2=="Marburg","Name2"]<-"Marburg, Fernbusstation"
busstops_nearest%>%
group_by(Name2)%>%
summarise(Longitude=mean(Longitude),Latitude=mean(Latitude),Lines=toString(Lines))->busstop_new
busstops_nearest$Name2=="Marburg"
busstops_nearest[busstops_nearest$Name2=="Marburg","Name2"]
busstops_nearest
library(plyr) # data handling
library(dplyr) # more data handling, piping (%>%)
library(sp)   # spatial objects
library(maps) # free maps of the world
library(mapdata) # world maps
library(RgoogleMaps) # get google maps
library(raster)  # raster data
library(rgdal)  # input/output, projections
library(rgeos)  # geometry operations
csv_file <- read.csv("Data/Marburg_data.csv",sep=";")
csv_file.df <- as.data.frame(csv_file)
head(csv_file.df)
summary(csv_file.df)
csv.spdf <- SpatialPointsDataFrame(csv_file.df[,c("longitude","latitude")],
data = csv_file.df)
bbox(csv.spdf)
marburg_area = extent(raster(xmn = 8.6893, xmx = 8.8145, ymn = 50.7700, ymx = 50.8437))
Hesse_roads <- readOGR("../VizAward_Data/hessen-latest.shp","roads") # this takes some time
Hesse_roads_sel = crop(Hesse_roads, marburg_area)
rm(Hesse_roads) # make space in the environment
busroutes_shp <- readOGR(dsn = "../VizAward_Data/export.gpx", layer = "tracks")
busstops_shp <- readOGR(dsn = "../VizAward_Data/export.gpx", layer = "waypoints")
busroutes_sel <- crop(busroutes_shp, marburg_area)
busstops_sel <- crop(busstops_shp, marburg_area)
rm(busroutes_shp) # make space in the environment
rm(busstops_shp) # make space in the environment
busroute_1_shp <- readOGR(dsn = "../VizAward_Data/export_Linie1.gpx", layer = "tracks")
busroute_2_shp <- readOGR(dsn = "../VizAward_Data/export_Linie2.gpx", layer = "tracks")
busroute_3_shp <- readOGR(dsn = "../VizAward_Data/export_Linie3.gpx", layer = "tracks")
busroute_4_shp <- readOGR(dsn = "../VizAward_Data/export_Linie4.gpx", layer = "tracks")
busroute_5_shp <- readOGR(dsn = "../VizAward_Data/export_Linie5.gpx", layer = "tracks")
busroute_6_shp <- readOGR(dsn = "../VizAward_Data/export_Linie6.gpx", layer = "tracks")
busroute_7_shp <- readOGR(dsn = "../VizAward_Data/export_Linie7.gpx", layer = "tracks")
busroute_8_shp <- readOGR(dsn = "../VizAward_Data/export_Linie8.gpx", layer = "tracks")
busroute_9_shp <- readOGR(dsn = "../VizAward_Data/export_Linie9.gpx", layer = "tracks")
busroute_10_shp <- readOGR(dsn = "../VizAward_Data/export_Linie10.gpx", layer = "tracks")
bus_line_list <- list(busroute_1_shp,busroute_2_shp,busroute_3_shp,busroute_4_shp,busroute_5_shp,
busroute_6_shp,busroute_7_shp,busroute_8_shp,busroute_9_shp,busroute_10_shp)
plot(Hesse_roads_sel, lwd = 2, col = "lightgrey")
plot(busroutes_sel, col = "blue", add = T)
points(busstops_sel,col="darkblue", cex = 0.5, pch = 16)
points(csv.spdf, col = "red", cex = 0.5, pch = 16)
busstop_tmp <- read.csv("Data/template_busstop.csv", sep = ",")
stores_tmp <- read.csv("Data/template_stores.csv", sep = ",")
csv_file.tbl <- tbl_df(csv_file.df)
csv_file.tbl %>% mutate(StoreID = paste("Store",row.names(csv_file.df),sep = "_")) %>%
mutate(Longitude = longitude) %>% mutate(Latitude = latitude) %>% mutate(Group = category) %>%
mutate(Labels = name) %>%
dplyr::select(one_of(c("StoreID","Longitude", "Latitude", "Group","Labels"))) -> stores
stores$Group<-as.character(stores$Group)
stores$Group[stores$Group=="food"]<-"supermarket"
stores$Labels<-as.character(stores$Labels)
stores<-stores[validUTF8(stores$Labels),]
stores<-stores[validEnc(stores$Labels),]
stores<-subset(stores,Group!="other_essentials")
#remove duplicated points
stores<-stores[-which(duplicated(stores[,c("Longitude","Latitude")])),]
csv.spdf[validUTF8(as.character(csv.spdf$name)),] -> stores.sp
stores.sp[validUTF8(as.character(stores.sp$name)),] -> stores.sp
stores.sp<-subset(stores.sp,stores.sp$category!="other_essentials")
stores.sp<-stores.sp[-which(duplicated(stores.sp@coords[,c("longitude","latitude")])),]
str(busstops_sel)
head(busstops_sel@coords)
dim(busstops_sel@coords)
busstops_sel[substr(busstops_sel$name,1,4)!="node",] -> busstops_subset
dim(busstops_subset@coords)
busstops_subset.df <- as.data.frame(busstops_subset)
str(busstops_subset.df)
busstops_subset.df %>% mutate(BusStopID = paste("Stop",row.names(busstops_subset.df),sep = "_")) %>%
mutate(Longitude = coords.x1) %>% mutate(Latitude = coords.x2 ) %>%
mutate(BusStopName = name) %>%
dplyr::select(one_of(c("BusStopID","Longitude", "Latitude", "BusStopName"))) -> busstops_subset.df
busstops_subset.df$BusStopName <- factor(busstops_subset.df$BusStopName)
str(busstops_subset.df)
busstops_nearest[6,"BusStopName"]<-"Pommernweg"
proj4string(stores.sp) <- proj4string(busstops_subset)
snap <- apply(spDists(stores.sp, bus_sp), 1, which.min)
snap <- apply(spDists(stores.sp, busstops_subset), 1, which.min)
busstops_nearest <- busstops_subset.df[unique(snap),]
busstops_nearest.sp <-busstops_subset[unique(snap),]
stores <- cbind(stores,busstop_new[snap,"BusStopID"])
busstops_nearest[6,"BusStopName"]
busstops_nearest[42,"BusStopName"]
busstops_nearest[6,"BusStopName"]<-"Pommernweg"
busstops_subset.df <- as.data.frame(busstops_subset)
str(busstops_subset.df)
# Clean up the data using the tbl class used by dplyr and tidyr
busstops_subset.df %>% mutate(BusStopID = paste("Stop",row.names(busstops_subset.df),sep = "_")) %>%
mutate(Longitude = coords.x1) %>% mutate(Latitude = coords.x2 ) %>%
mutate(BusStopName = name) %>%
dplyr::select(one_of(c("BusStopID","Longitude", "Latitude", "BusStopName"))) -> busstops_subset.df
str(busstops_subset.df)
str(busstops_subset)
as.character(busstops_subset.df$BusStopName)
busstops_subset.df$BusStopName <- as.character(busstops_subset.df$BusStopName)
str(busstops_subset.df)
busstops_nearest <- busstops_subset.df[unique(snap),]
str(busstops_nearest)
busstops_nearest.sp <-busstops_subset[unique(snap),]
busstops_nearest[6,"BusStopName"]<-"Pommernweg"
busstops_nearest[42,"BusStopName"]<-"Elisabethenhof"
busstops_nearest[74,"BusStopName"]<-"Ginseldorfer Weg"
busstops_nearest[33,"BusStopName"]<-"Afföllerstraße"
busstops_nearest[13,"BusStopName"]<-"Am Kaufmarkt"
busstops_nearest<-busstops_nearest[-which(busstops_nearest$BusStopName=="Marburg"),]
busstops_nearest$Name2<-sapply(strsplit(busstops_nearest$BusStopName,split = ","),function(x) x[1])
busstops_nearest[busstops_nearest$Name2=="Marburg","Name2"]<-"Marburg, Fernbusstation"
busstops_nearest%>%
group_by(Name2)%>%
summarise(Longitude=mean(Longitude),Latitude=mean(Latitude),Lines=toString(Lines))->busstop_new
busstops_nearest%>%
group_by(Name2)
busstops_nearest <- cbind(busstops_nearest, NbBusLine = 0, BusLine = "L",stringsAsFactors=FALSE)
str(busstops_nearest)
bus_sp
bus_sp<-busstops_nearest
coordinates(bus_sp)<-bus_sp[,c("Longitude","Latitude")]
proj4string(bus_sp)<-proj4string(bus_line_list[[1]])
busstops_nearest$Lines<-"L"
for(i in 1:10){
tmp<-gIntersection(bus_line_list[[i]],bus_sp)
busstops_nearest[busstops_nearest$Longitude%in%coordinates(tmp)[,1],"Lines"]<-paste(busstops_nearest[busstops_nearest$Longitude%in%coordinates(tmp)[,1],"Lines"],i,sep="-")
}
str(busstops_nearest)
busstops_nearest%>%
group_by(Name2)%>%
summarise(Longitude=mean(Longitude),Latitude=mean(Latitude),Lines=toString(Lines))->busstop_new
head(busstop_new)
stores <- cbind(stores,busstop_new[snap,"BusStopID"])
names(stores)
snap
apply(spDists(stores.sp, busstop_new), 1, which.min)
head(busstop_new)
busstop_new.sp <- SpatialPointsDataFrame(busstop_new[,c("Longitude","Latitude")],
data = busstop_new)
proj4string(busstop_new.sp) <- proj4string(stores.sp)
class(busstop_new)
class(busstop_new) <- "data.frame"
class(busstop_new)
class(busstop_new) <- "data.frame"
busstop_new.sp <- SpatialPointsDataFrame(busstop_new[,c("Longitude","Latitude")],
data = busstop_new)
proj4string(busstop_new.sp) <- proj4string(stores.sp)
snap_new <- apply(spDists(stores.sp, busstop_new.sp), 1, which.min)
head(busstop_new)
stores <- cbind(stores,busstop_new[snap_new,"Name2"])
names(stores)
busstop_new[snap_new,"Name2"]
head(stores)
names(stores) <- c("StoreID", "Longitude", "Latitude", "Group","Labels","BusStopID")
head(stores)
paste("Stop",1:50)
names(stores) <- c("StoreID", "Longitude", "Latitude", "Group","Labels","Name2")
head(stores)
busstop_new$BusStopID
nrow(busstop_new)
busstop_new$BusStopID<-paste("Stop",1:nrow(busstop_new))
pages
library(plyr) # data handling
library(dplyr) # more data handling, piping (%>%)
library(sp)   # spatial objects
library(maps) # free maps of the world
library(mapdata) # world maps
library(RgoogleMaps) # get google maps
library(raster)  # raster data
library(rgdal)  # input/output, projections
library(rgeos)  # geometry operations
pages<-readLines("~/Data/bus_pages.txt") #this is just a file with the bus stops where extra infos is available
setwd("C:/Users/Nadja/8-Freising/05_Tagungen_Workshops/GfÖ-Tagung 2016/Vizualization_Award")
pages<-readLines("~/Data/bus_pages.txt") #this is just a file with the bus stops where extra infos is available
pages<-readLines("../Data/bus_pages.txt") #this is just a file with the bus stops where extra infos is available
pages<-readLines("Data/bus_pages.txt") #this is just a file with the bus stops where extra infos is available
busstop_new$Tag<-busstop_new$Name2
for(i in which(busstop_new$Tag%in%pages)){
busstop_new$Tag[i]<-paste0("<b><a href='http://stadtwerke-marburg.de/fileadmin/media/stadtverkehr/haltest/",busstop_new[i,"Tag"],".pdf'>",busstop_new[i,"Tag"],"</a></b>")
}
busstop_new$Tag[5]<-"<b><a href='http://stadtwerke-marburg.de/fileadmin/media/stadtverkehr/haltest/Botanischer_Garten.pdf'>Botanischer Garten</a></b>"
busstop_new$Tag[24]<-"<b><a href='http://stadtwerke-marburg.de/fileadmin/media/stadtverkehr/haltest/Bahnhofstraße.pdf'>Bahnhofstraße</a></b>"
busstop_new$Tag[35]<-"<b><a href='http://stadtwerke-marburg.de/fileadmin/media/stadtverkehr/haltest/Rudolphsplatz_Stadthalle.pdf'>Rudolphplatz</a></b>"
busstop_new[5,]
busstop_new[Name2="Botanischer Garten",]
busstop_new
busstop_new$Tag<-busstop_new$Name2
busstop_new$Tag=="Botanischer Garten"
busstop_new$Tag[busstop_new$Tag=="Botanischer Garten"]
busstop_new$Name2=="Bahnhofstraße"
busstop_new$Name2
pages
busstop_new$Tag[busstop_new$Name2=="Botanischer Garten"]<-"<b><a href='http://stadtwerke-marburg.de/fileadmin/media/stadtverkehr/haltest/Botanischer_Garten.pdf'>Botanischer Garten</a></b>"
busstop_new$Tag[busstop_new$Name2=="Marburg-BahnhofstraÃŸe"]<-"<b><a href='http://stadtwerke-marburg.de/fileadmin/media/stadtverkehr/haltest/Bahnhofstraße.pdf'>Bahnhofstraße</a></b>"
busstop_new$Tag[busstop_new$Name2=="Rudolphsplatz"]<-"<b><a href='http://stadtwerke-marburg.de/fileadmin/media/stadtverkehr/haltest/Rudolphsplatz_Stadthalle.pdf'>Rudolphplatz</a></b>"
busstop_new$Tag
for(i in which(busstop_new$Tag%in%pages)){
busstop_new$Tag[i]<-paste0("<b><a href='http://stadtwerke-marburg.de/fileadmin/media/stadtverkehr/haltest/",busstop_new[i,"Tag"],".pdf'>",busstop_new[i,"Tag"],"</a></b>")
}
busstop_new$Tag
which(busstop_new$Tag%in%pages)
which(busstop_new$Name2%in%pages)
bus_sp<-as.data.frame(busstop_new)
coordinates(bus_sp)<-bus_sp[,c("Longitude","Latitude")]
proj4string(bus_sp)<-proj4string(bus_line_list[[1]])
head(busstops_nearest)
busline_colors <- c("#a6cee3","#1f78b4","#b2df8a","#33a02c","#fb9a99","#e31a1c",
"#fdbf6f","#ff7f00","#cab2d6","#6a3d9a")
plot(Hesse_roads_sel, lwd = 2, col = "lightgrey")
for (i in 1: 10){
plot(bus_line_list[[i]], col = busline_colors[i], add = T)
}
write.table(x = busstops_nearest, file = "Data/busstops_near.csv",sep = ",", dec = ".",row.names = F)
write.table(x = stores, file = "Data/stores_busstops.csv",sep = ",", dec = ".",row.names = F)
library(leaflet)
library(devtools)
install_github("rstudio/leaflet")
col_line <- colorFactor(viridis(length(bus_line_list)),as.character(1:length(bus_line_list)))
library(viridis) # to make color palette
col_line <- colorFactor(viridis(length(bus_line_list)),as.character(1:length(bus_line_list)))
opacity_bus_lines <- 0.3
names(bus_line_list)
names(bus_line_list) <- c(1:length(bus_line_list))
leaflet() %>%
setView(lng=8.774149, lat=50.810685,zoom = 14)%>%
addTiles("https://api.mapbox.com/styles/v1/mapbox/streets-v9/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1IjoibGlvbmVsNjgiLCJhIjoiY2lyOHVtY2ZqMDAycmlsbHd3cXF4azhzdiJ9.FHJtGBW1bhjCr-JLnC4brw",
option=tileOptions(minZoom=13,maxZoom=18)) %>%
addAwesomeMarkers(data=busstop_new,lng=~Longitude,lat=~Latitude,popup=~Tag)
leaflet() %>%
setView(lng=8.774149, lat=50.810685,zoom = 14)%>%
addTiles("https://api.mapbox.com/styles/v1/mapbox/streets-v9/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1IjoibGlvbmVsNjgiLCJhIjoiY2lyOHVtY2ZqMDAycmlsbHd3cXF4azhzdiJ9.FHJtGBW1bhjCr-JLnC4brw",
option=tileOptions(minZoom=13,maxZoom=18)) %>%
addAwesomeMarkers(data=busstop_new,lng=~Longitude,lat=~Latitude,popup=~Tag)%>%
addAwesomeMarkers(lng=8.774149, lat=50.810685, popup="The conference venue",icon=icon_uni)%>%
addAwesomeMarkers(data=bus,lng=~Longitude,lat=~Latitude,label=~BusStopName,icon=icon_bus)%>%
addAwesomeMarkers(data=stores,lng=~Longitude,lat=~Latitude,icon=~icons[Group],label = ~Labels,labelOptions = list(opacity=5)) %>%
addPolylines(data=bus_line_list[[1]],stroke=TRUE,color=col_line(1),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[2]],stroke=TRUE,color=col_line(2),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[3]],stroke=TRUE,color=col_line(3),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[4]],stroke=TRUE,color=col_line(4),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[5]],stroke=TRUE,color=col_line(5),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[6]],stroke=TRUE,color=col_line(6),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[7]],stroke=TRUE,color=col_line(7),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[8]],stroke=TRUE,color=col_line(8),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[9]],stroke=TRUE,color=col_line(9),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[10]],stroke=TRUE,color=col_line(10),noClip=FALSE,opacity = opacity_bus_lines)
icon_uni<-makeAwesomeIcon(icon="university",library="fa",markerColor="red",iconColor="white")
icon_bus<-makeAwesomeIcon(icon="bus",library = "fa",markerColor="darkblue",iconColor="white")
leaflet() %>%
setView(lng=8.774149, lat=50.810685,zoom = 14)%>%
addTiles("https://api.mapbox.com/styles/v1/mapbox/streets-v9/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1IjoibGlvbmVsNjgiLCJhIjoiY2lyOHVtY2ZqMDAycmlsbHd3cXF4azhzdiJ9.FHJtGBW1bhjCr-JLnC4brw",
option=tileOptions(minZoom=13,maxZoom=18)) %>%
addAwesomeMarkers(data=busstop_new,lng=~Longitude,lat=~Latitude,popup=~Tag)%>%
addAwesomeMarkers(lng=8.774149, lat=50.810685, popup="The conference venue",icon=icon_uni)%>%
addAwesomeMarkers(data=bus,lng=~Longitude,lat=~Latitude,label=~BusStopName,icon=icon_bus)%>%
addAwesomeMarkers(data=stores,lng=~Longitude,lat=~Latitude,icon=~icons[Group],label = ~Labels,labelOptions = list(opacity=5)) %>%
addPolylines(data=bus_line_list[[1]],stroke=TRUE,color=col_line(1),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[2]],stroke=TRUE,color=col_line(2),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[3]],stroke=TRUE,color=col_line(3),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[4]],stroke=TRUE,color=col_line(4),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[5]],stroke=TRUE,color=col_line(5),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[6]],stroke=TRUE,color=col_line(6),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[7]],stroke=TRUE,color=col_line(7),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[8]],stroke=TRUE,color=col_line(8),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[9]],stroke=TRUE,color=col_line(9),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[10]],stroke=TRUE,color=col_line(10),noClip=FALSE,opacity = opacity_bus_lines)
leaflet() %>%
setView(lng=8.774149, lat=50.810685,zoom = 14)%>%
addTiles("https://api.mapbox.com/styles/v1/mapbox/streets-v9/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1IjoibGlvbmVsNjgiLCJhIjoiY2lyOHVtY2ZqMDAycmlsbHd3cXF4azhzdiJ9.FHJtGBW1bhjCr-JLnC4brw",
option=tileOptions(minZoom=13,maxZoom=18)) %>%
addAwesomeMarkers(data=busstop_new,lng=~Longitude,lat=~Latitude,popup=~Tag)%>%
addAwesomeMarkers(lng=8.774149, lat=50.810685, popup="The conference venue",icon=icon_uni)%>%
addAwesomeMarkers(data=busstops_nearest,lng=~Longitude,lat=~Latitude,label=~BusStopName,icon=icon_bus)%>%
addAwesomeMarkers(data=stores,lng=~Longitude,lat=~Latitude,icon=~icons[Group],label = ~Labels,labelOptions = list(opacity=5)) %>%
addPolylines(data=bus_line_list[[1]],stroke=TRUE,color=col_line(1),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[2]],stroke=TRUE,color=col_line(2),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[3]],stroke=TRUE,color=col_line(3),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[4]],stroke=TRUE,color=col_line(4),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[5]],stroke=TRUE,color=col_line(5),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[6]],stroke=TRUE,color=col_line(6),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[7]],stroke=TRUE,color=col_line(7),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[8]],stroke=TRUE,color=col_line(8),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[9]],stroke=TRUE,color=col_line(9),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[10]],stroke=TRUE,color=col_line(10),noClip=FALSE,opacity = opacity_bus_lines)
leaflet() %>%
setView(lng=8.774149, lat=50.810685,zoom = 14)%>%
addTiles("https://api.mapbox.com/styles/v1/mapbox/streets-v9/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1IjoibGlvbmVsNjgiLCJhIjoiY2lyOHVtY2ZqMDAycmlsbHd3cXF4azhzdiJ9.FHJtGBW1bhjCr-JLnC4brw",
option=tileOptions(minZoom=13,maxZoom=18)) %>%
addAwesomeMarkers(data=busstop_new,lng=~Longitude,lat=~Latitude,popup=~Tag)
leaflet() %>%
setView(lng=8.774149, lat=50.810685,zoom = 14)%>%
addTiles("https://api.mapbox.com/styles/v1/mapbox/streets-v9/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1IjoibGlvbmVsNjgiLCJhIjoiY2lyOHVtY2ZqMDAycmlsbHd3cXF4azhzdiJ9.FHJtGBW1bhjCr-JLnC4brw",
option=tileOptions(minZoom=13,maxZoom=18)) %>%
addAwesomeMarkers(data=busstop_new,lng=~Longitude,lat=~Latitude,popup=~Tag)%>%
addAwesomeMarkers(lng=8.774149, lat=50.810685, popup="The conference venue",icon=icon_uni)
leaflet() %>%
setView(lng=8.774149, lat=50.810685,zoom = 14)%>%
addTiles("https://api.mapbox.com/styles/v1/mapbox/streets-v9/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1IjoibGlvbmVsNjgiLCJhIjoiY2lyOHVtY2ZqMDAycmlsbHd3cXF4azhzdiJ9.FHJtGBW1bhjCr-JLnC4brw",
option=tileOptions(minZoom=13,maxZoom=18)) %>%
addAwesomeMarkers(data=busstop_new,lng=~Longitude,lat=~Latitude,popup=~Tag)%>%
addAwesomeMarkers(lng=8.774149, lat=50.810685, popup="The conference venue",icon=icon_uni)%>%
addAwesomeMarkers(data=busstops_nearest,lng=~Longitude,lat=~Latitude,label=~BusStopName,icon=icon_bus)
leaflet() %>%
setView(lng=8.774149, lat=50.810685,zoom = 14)%>%
addTiles("https://api.mapbox.com/styles/v1/mapbox/streets-v9/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1IjoibGlvbmVsNjgiLCJhIjoiY2lyOHVtY2ZqMDAycmlsbHd3cXF4azhzdiJ9.FHJtGBW1bhjCr-JLnC4brw",
option=tileOptions(minZoom=13,maxZoom=18)) %>%
addAwesomeMarkers(data=busstop_new,lng=~Longitude,lat=~Latitude,popup=~Tag)%>%
addAwesomeMarkers(lng=8.774149, lat=50.810685, popup="The conference venue",icon=icon_uni)%>%
addAwesomeMarkers(data=busstops_nearest,lng=~Longitude,lat=~Latitude,label=~BusStopName,icon=icon_bus)%>%
addAwesomeMarkers(data=stores,lng=~Longitude,lat=~Latitude,icon=~icons[Group],label = ~Labels,labelOptions = list(opacity=5))
icons<-awesomeIconList(
bar_pub_bistro=makeAwesomeIcon(icon = "beer",library = "fa",markerColor = "orange",iconColor = "green"),
restaurant=makeAwesomeIcon(icon = "cutlery",library = "fa",markerColor = "white",iconColor = "darkred"),
supermarket=makeAwesomeIcon(icon="shopping-cart",library = "glyphicon",markerColor = "cadetblue",iconColor = "#c3f971"),
pharmacy=makeAwesomeIcon(icon="medkit",library="fa",markerColor = "white",iconColor="red"),
accomodation=makeAwesomeIcon(icon="building-o",library="fa",markerColor = "white",iconColor = "yellow"),
bakery=makeAwesomeIcon(icon="grain",library="glyphicon",markerColor = "white",iconColor="orange"),
cafe=makeAwesomeIcon(icon="coffee",library="fa",markerColor = "cadetblue",iconColor="orange"),
imbiss=makeAwesomeIcon(icon="pizza",library="ion",markerColor = "white",iconColor="pink"),
taxi=makeAwesomeIcon(icon="taxi",library="fa",markerColor = "darkblue")
)
leaflet() %>%
setView(lng=8.774149, lat=50.810685,zoom = 14)%>%
addTiles("https://api.mapbox.com/styles/v1/mapbox/streets-v9/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1IjoibGlvbmVsNjgiLCJhIjoiY2lyOHVtY2ZqMDAycmlsbHd3cXF4azhzdiJ9.FHJtGBW1bhjCr-JLnC4brw",
option=tileOptions(minZoom=13,maxZoom=18)) %>%
addAwesomeMarkers(data=busstop_new,lng=~Longitude,lat=~Latitude,popup=~Tag)%>%
addAwesomeMarkers(lng=8.774149, lat=50.810685, popup="The conference venue",icon=icon_uni)%>%
addAwesomeMarkers(data=busstops_nearest,lng=~Longitude,lat=~Latitude,label=~BusStopName,icon=icon_bus)%>%
addAwesomeMarkers(data=stores,lng=~Longitude,lat=~Latitude,icon=~icons[Group],label = ~Labels,labelOptions = list(opacity=5))
leaflet() %>%
setView(lng=8.774149, lat=50.810685,zoom = 14)%>%
addTiles("https://api.mapbox.com/styles/v1/mapbox/streets-v9/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1IjoibGlvbmVsNjgiLCJhIjoiY2lyOHVtY2ZqMDAycmlsbHd3cXF4azhzdiJ9.FHJtGBW1bhjCr-JLnC4brw",
option=tileOptions(minZoom=13,maxZoom=18)) %>%
addAwesomeMarkers(data=busstop_new,lng=~Longitude,lat=~Latitude,popup=~Tag)%>%
addAwesomeMarkers(lng=8.774149, lat=50.810685, popup="The conference venue",icon=icon_uni)%>%
addAwesomeMarkers(data=busstops_nearest,lng=~Longitude,lat=~Latitude,label=~BusStopName,icon=icon_bus)%>%
addAwesomeMarkers(data=stores,lng=~Longitude,lat=~Latitude,icon=~icons[Group],label = ~Labels,labelOptions = list(opacity=5)) %>%
addPolylines(data=bus_line_list[[1]],stroke=TRUE,color=col_line(1),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[2]],stroke=TRUE,color=col_line(2),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[3]],stroke=TRUE,color=col_line(3),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[4]],stroke=TRUE,color=col_line(4),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[5]],stroke=TRUE,color=col_line(5),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[6]],stroke=TRUE,color=col_line(6),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[7]],stroke=TRUE,color=col_line(7),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[8]],stroke=TRUE,color=col_line(8),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[9]],stroke=TRUE,color=col_line(9),noClip=FALSE,opacity = opacity_bus_lines)%>%
addPolylines(data=bus_line_list[[10]],stroke=TRUE,color=col_line(10),noClip=FALSE,opacity = opacity_bus_lines)
