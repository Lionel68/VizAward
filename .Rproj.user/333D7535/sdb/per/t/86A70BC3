{
    "collab_server" : "",
    "contents" : "########################################################################################\n#                                    # # #                                             #\n#This is the server part of the Shiny App for the Visualization awards GfOe 2016\n#code written by Lionel R. Hertzog and Nadja Simmons\n\n#Updated: 17.08.2016\n########################################################################################\n\n#Next steps:\n#Add templates for bus stop infos (DONE)\n#Find markers for the different group of stores (DONE)\n#Make appearance of stores reactive to the click on a nearby bus stop (DONE)\n#Add lines for bus connection (DONE)\n#Allow the user to select only specific bus line (DONE)\n#Add store informations (ie website) in popup window (TODO)\n#Issue with name encoding ... (DONE)\n#Correct bug when clicking stores l156 (DONE)\n\n#to load the App use: shinyAppDir(\"~/Documents/PhD/Presentation/GfÖ_2016/Visualization/VizAward_shiny/\")\n\n#load the libraries\nlibrary(shiny)\nlibrary(leaflet) #github version\nlibrary(sp)\nlibrary(plyr)\nlibrary(RCurl) #to load data directly from github\nlibrary(viridis)\n\n#load the data\n#load the actual store data from GitHub\nstores<-read.table(text=getURL(\"https://raw.githubusercontent.com/Lionel68/VizAward/master/Data/stores_busstops.csv\"),head=TRUE,sep=\" \",stringsAsFactors = FALSE)\n#stores<-read.table(\"/home/lionel/Documents/PhD/Presentation/GfÖ_2016/Visualization/Data/stores_busstops.csv\",sep=\" \",head=TRUE,stringsAsFactors = FALSE)\n#load bus stop\nbus<-read.table(text=getURL(\"https://raw.githubusercontent.com/Lionel68/VizAward/master/Data/busstops_near.csv\"),head=TRUE,sep=\" \",stringsAsFactors = FALSE)\n#bus<-read.table(\"/home/lionel/Documents/PhD/Presentation/GfÖ_2016/Visualization/Data/busstops_near.csv\",sep=\" \",head=TRUE,stringsAsFactors = FALSE)\n\n#load bus line\nload(\"./Data/bus_line_list.RData\",envir=.GlobalEnv)\nnames(bus_line_list)<-as.character(1:10)\n\n\n#Define the server\nshinyServer(function(input, output) {\n  \n  ################\n  #simulation part\n  #set.seed(20160826)\n  #simulate some data for the stores\n  #stores<-data.frame(infos=paste(\"Point\",1:30),longitude=8.774149+rnorm(30,0,0.01),latitude=50.810685+rnorm(30,0,0.01),Group=gl(n = 6,k=5,length = 30,labels = c(\"Restaurant\",\"Bar\",\"Club\",\"Market\",\"Bank\",\"Hospital\")))\n  \n  #simulate some data for the bus stop\n  #bus<-data.frame(BusStopID=1:5,BusStopName=letters[1:5],latitude=c(50.818,50.809,50.814,50.804,50.805),longitude=c(8.773,8.774,8.769,8.759,8.781),labels=c(\"<b>Hauptbahnof</b><br/>Linie:<br/><b><a href='http://google.com'>1</a></b>\",\"<b>Uni</b><br/>Linie:<br/><b><a href='http://google.com'>1</a></b>\",\"<b>Marienplatz</b><br/>Linie:<br/><b><a href='http://google.com'>1</a></b>\",\"<b>Marktstrasse</b><br/>Linie:<br/><b><a href='http://google.com'>1</a></b>\",\"<b>Weihenstephan</b><br/>Linie:<br/><b><a href='http://google.com'>1</a></b>\"))\n  \n  #link every store to the nearest bus stop (could change this to a specific distance radius in the future)\n  #when the data are ready this will be set in the store dataframe\n  #snap <- apply(spDists(as.matrix(stores[,c(\"longitude\",\"latitude\")]), as.matrix(bus[,c(\"longitude\",\"latitude\")])), 1, which.min)\n  #stores$BusStopID<-snap\n  \n  #end of simulation part\n  #will be replaced by data loading in the future\n  ##################################################\n\n\n  #create the icons for the stores and the conference center\n  icon_uni<-makeAwesomeIcon(icon=\"university\",library=\"fa\",markerColor=\"red\",iconColor=\"white\")\n \n  icon_bus<-makeAwesomeIcon(icon=\"bus\",library = \"fa\",markerColor=\"darkblue\",iconColor=\"white\")\n  #have a look here for icons: http://fontawesome.io/icons/, http://getbootstrap.com/components/\n  #and for making colors for the icons: http://www.hexcolortool.com/\n  icons<-awesomeIconList(\n    bar_pub_bistro=makeAwesomeIcon(icon = \"beer\",library = \"fa\",markerColor = \"orange\",iconColor = \"green\"),\n    restaurant=makeAwesomeIcon(icon = \"cutlery\",library = \"fa\",markerColor = \"white\",iconColor = \"darkred\"),\n    supermarket=makeAwesomeIcon(icon=\"shopping-cart\",library = \"glyphicon\",markerColor = \"cadetblue\",iconColor = \"#c3f971\"),\n    pharmacy=makeAwesomeIcon(icon=\"medkit\",library=\"fa\",markerColor = \"white\",iconColor=\"red\"),\n    accomodation=makeAwesomeIcon(icon=\"building-o\",library=\"fa\",markerColor = \"white\",iconColor = \"yellow\"),\n    bakery=makeAwesomeIcon(icon=\"grain\",library=\"glyphicon\",markerColor = \"white\",iconColor=\"orange\"),\n    cafe=makeAwesomeIcon(icon=\"coffee\",library=\"fa\",markerColor = \"cadetblue\",iconColor=\"orange\"),\n    imbiss=makeAwesomeIcon(icon=\"pizza\",library=\"ion\",markerColor = \"white\",iconColor=\"pink\"),\n    taxi=makeAwesomeIcon(icon=\"taxi\",library=\"fa\",markerColor = \"darkblue\")\n  ) \n  \n  #color palette for the bus line\n  col_line <- colorFactor(viridis(10),as.character(1:10))\n  \n  #reactive element to only select the bus stop along the selected bus line\n  subBus<-reactive({\n    if(input$lines==1){\n      tmp<-bus[grep(input$lines,bus$Lines),]\n      #remove the 10 that are also matched by 1\n      tmp[-grep(\"10\",tmp$Lines),]\n    }\n    else{\n      bus[grep(input$lines,bus$Lines),]\n    }\n  })\n  \n  #if the user set a specific group\n  subStores<-reactive({\n    if(input$group!=\"All\"){\n      subset(stores,Group==input$group)\n    }\n    else{\n      stores\n    }\n  })\n  \n  \n  #if the user select certain bus line\n  subLines<-reactive({\n    bus_line_list[input$lines][[1]]\n  })\n  \n  #dynamically set the popup window for the timetable of the bus line\n  line_popup<-reactive({\n    paste0(\"<b><a href='http://stadtwerke-marburg.de/fileadmin/media/stadtverkehr/Fahrplan_2016/ab_11.04.16/Linie_\",input$lines,\".pdf'>Linie \",input$lines,\"</a></b>\")\n  })\n\n  \n  #the base map\n  output$mymap <- renderLeaflet({\n    \n    leaflet() %>%\n      setView(lng=8.774149, lat=50.810685,zoom = 14)%>%\n      addTiles(\"https://api.mapbox.com/styles/v1/mapbox/streets-v9/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1IjoibGlvbmVsNjgiLCJhIjoiY2lyOHVtY2ZqMDAycmlsbHd3cXF4azhzdiJ9.FHJtGBW1bhjCr-JLnC4brw\",option=tileOptions(minZoom=13,maxZoom=18))%>%\n      addAwesomeMarkers(lng=8.774149, lat=50.810685, popup=\"The conference venue\",icon=icon_uni)\n  })\n    \n \n  #add the bus line\n  observe({\n    leafletProxy(\"mymap\")%>%\n      clearGroup(\"Line\")%>%\n      addPolylines(data=subLines(),color = ~col_line(input$lines),label = paste(\"Line\",input$lines),group = \"Line\",popup = line_popup())%>%\n      showGroup(\"Line\")\n    })\n  #add the bus stop\n  observe({\n    leafletProxy(\"mymap\",data=subBus())%>%\n      clearGroup(\"Stop\")%>%\n      addAwesomeMarkers(lng=~Longitude,lat=~Latitude,icon=icon_bus,group=\"Stop\",layerId=~BusStopID,label=~BusStopName,popup=~Tag)%>%\n      showGroup(\"Stop\")\n  })\n\n  #the function to show the stores\n  showStores<-function(ID){\n    if(!is.null(ID)){\n      selectStores <- subset(subStores(),BusStopID==ID)\n      if(dim(selectStores)[1]>0){\n        leafletProxy(\"mymap\")%>%\n          showGroup(\"Stores\")%>%\n          addAwesomeMarkers(data=selectStores,lng=~Longitude,lat=~Latitude,icon=~icons[Group],label=~Labels,popup=~Labels,layerId=~StoreID,group=\"Stores\")\n      }\n    }\n  }\n  \n  #set the different events that may happen based on users click on the map\n  events <- reactiveValues(mouse_marker=NULL,mouse_out=NULL,click_marker=NULL,click_map=NULL)\n  #if the mouse hover a bus stop show the nearby stores\n  observeEvent(input$mymap_marker_mouseover,{\n    events$mouse_out <- NULL\n    if(is.null(events$click_marker)){\n      events$mouse_marker <- input$mymap_marker_mouseover\n      showStores(events$mouse_marker$id)\n    }\n  })\n  #if the mouse leaves a bus stop clear the markers\n  observeEvent(input$mymap_marker_mouseout,{\n    events$mouse_marker <- NULL\n    leafletProxy(\"mymap\")%>%\n      clearGroup(\"Stores\")\n    if(!is.null(events$click_marker)){\n      showStores(events$click_marker$id)\n    }\n  })\n  #if the user click on a bus stop show the nearby stores\n  observeEvent(input$mymap_marker_click,{\n   events$click_map <- NULL\n   events$click_marker <- input$mymap_marker_click\n   if(!is.null(events$click_marker$id)){\n     if(length(grep(\"Stop\",events$click_marker$id)!=0))\n       showStores(events$click_marker$id)\n   }\n })\n #if the user click on the map remove the markers\n observeEvent(input$mymap_click,{\n   events$click_marker <-NULL\n   leafletProxy(\"mymap\")%>%\n     clearGroup(\"Stores\")\n  })\n\n})\n\n#for testing purposes\n#leaflet() %>%\n#  setView(lng=8.774149, lat=50.810685,zoom = 14)%>%\n#  addTiles(\"https://api.mapbox.com/styles/v1/mapbox/streets-v9/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1IjoibGlvbmVsNjgiLCJhIjoiY2lyOHVtY2ZqMDAycmlsbHd3cXF4azhzdiJ9.FHJtGBW1bhjCr-JLnC4brw\",option=tileOptions(minZoom=13,maxZoom=18))%>%\n#  addAwesomeMarkers(data=busstop_new,lng=~Longitude,lat=~Latitude,popup=~Tag)\n#  addPolylines(data=bus_line_list[[1]],stroke=TRUE,color=\"green\",noClip = FALSE)%>%\n#  addPolylines(data=bus_line_list[[2]],stroke=TRUE,color=\"red\",noClip = FALSE)%>%\n#  %>%\n#  addAwesomeMarkers(lng=8.774149, lat=50.810685, popup=\"The conference venue\",icon=icon_uni)%>%\n#  addAwesomeMarkers(data=bus,lng=~Longitude,lat=~Latitude,label=~BusStopName,icon=icon_bus)%>%\n#  addAwesomeMarkers(data=stores,lng=~Longitude,lat=~Latitude,icon=~icons[Group],label = ~Labels,labelOptions = list(opacity=5))\n",
    "created" : 1471448694608.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1230453668",
    "id" : "86A70BC3",
    "lastKnownWriteTime" : 1471446463,
    "last_content_update" : 1471446463,
    "path" : "C:/Users/Nadja/8-Freising/05_Tagungen_Workshops/GfÖ-Tagung 2016/Vizualization_Award/VizAward_shiny/server.R",
    "project_path" : "VizAward_shiny/server.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}