{
    "collab_server" : "",
    "contents" : "########################################################################################\n#                                    # # #                                             #\n#This file is used to prepare the final data used in the shiny application             #\n#code written by Lionel R. Hertzog and Nadja Simmons\n\n#Updated: 28.07.2016\n########################################################################################\n\n\nlibrary(plyr)\nlibrary(dplyr)\nlibrary(tidyr) # more data management\n\n# Import the templates\n\nbusstop_tmp <- read.csv(\"Data/template_busstop.csv\", sep = \",\")\nstores_tmp <- read.csv(\"Data/template_stores.csv\", sep = \",\")\n\n# look at the templates\nstr(busstop_tmp)\n# $ BusStopID  : int  1 2 3 4\n# $ Longitude  : int  11 11 10 10\n# $ Latitude   : int  1 2 1 2\n# $ BusStopName: Factor w/ 4 levels \"Hbf\",\"Markplatz\",..: 2 1 3 4\n# $ NbBusLine  : int  2 5 1 1\n# $ BusLine    : Factor w/ 4 levels \"1-2\",\"1-2-3-4-5\",..: 1 2 3 4\nstr(stores_tmp)\n# $ StoreID  : int  1 2 3 4\n# $ Longitude: int  11 11 10 10\n# $ Latitude : int  1 2 1 2\n# $ Group    : Factor w/ 4 levels \"A\",\"B\",\"C\",\"D\": 1 2 3 4\n# $ Labels   : Factor w/ 4 levels \"Am Adler\",\"Mensa\",..: 2 1 3 4\n# $ BusStopID: int  1 1 1 1\n\n# look at the data we already have\nstr(csv_file.df)\n# $ latitude       : num  50.8 50.8 50.8 50.8 50.8 ...\n# $ longitude      : num  8.77 8.77 8.76 8.79 8.77 ...\n# $ elevation_m_asl: int  212 183 192 270 185 184 186 185 187 190 ...\n# $ name           : Factor w/ 334 levels \"5 Jahreszeiten\",..: 6 11 13 13 13 13 21 58 74 76 ...\n# $ street         : Factor w/ 110 levels \"Affoellerstr.\",..: 76 88 10 40 58 85 5 42 20 24 ...\n# $ street_no      : Factor w/ 106 levels \"\",\"01. Jun\",\"05. Jul\",..: 9 65 1 102 63 80 5 11 97 12 ...\n# $ zip_code       : int  35037 35037 35037 35039 35039 35037 35041 35037 35037 35037 ...\n# $ city           : Factor w/ 4 levels \"Marburg\",\"Marburg-Cappel\",..: 1 1 1 1 1 1 1 1 1 1 ...\n# $ tel            : Factor w/ 16 levels \"\",\"06421-144 44\",..: 1 1 1 1 1 1 1 1 1 1 ...\n# $ category       : Factor w/ 11 levels \"accomodation\",..: 7 7 7 7 7 7 7 7 7 7 ...\n\n# Some columns are already as we need them, some are unnecessary\n# Clean up the data using the tbl class used by dplyr and tidyr\ncsv_file.tbl <- tbl_df(csv_file.df)\ncsv_file.tbl %>% mutate(StoreID = paste(\"Store\",row.names(csv_file.df),sep = \"_\")) %>%\n  mutate(Longitude = longitude) %>% mutate(Latitude = latitude) %>% mutate(Group = category) %>%\n  mutate(Labels = name) %>%\n  dplyr::select(one_of(c(\"StoreID\",\"Longitude\", \"Latitude\", \"Group\",\"Labels\"))) -> stores\n\n#rename some category\nstores$Group<-as.character(stores$Group)\nstores$Group[stores$Group==\"food\"]<-\"supermarket\"\nstores$Labels<-as.character(stores$Labels)\n#remove bad names\nstores<-stores[validUTF8(stores$Labels),]\nstores<-stores[validEnc(stores$Labels),]\n\ncsv.spdf[validUTF8(as.character(csv.spdf$name)),] -> stores.sp\nstores.sp[validUTF8(as.character(stores.sp$name)),] -> stores.sp\n\n# Look at the busstop data\nstr(busstops_sel)\nhead(busstops_sel@coords)\ndim(busstops_sel@coords)\n\n# Remove busstops without proper names\nbusstops_sel[substr(busstops_sel$name,1,4)!=\"node\",] -> busstops_subset\ndim(busstops_subset@coords)\n\n# convert into data.frame\nbusstops_subset.df <- as.data.frame(busstops_subset)\nstr(busstops_subset.df)\n\n# Clean up the data using the tbl class used by dplyr and tidyr\nbusstops_subset.df %>% mutate(BusStopID = paste(\"Stop\",row.names(busstops_subset.df),sep = \"_\")) %>%\n  mutate(Longitude = coords.x1) %>% mutate(Latitude = coords.x2 ) %>%\n  mutate(BusStopName = name) %>%\n  dplyr::select(one_of(c(\"BusStopID\",\"Longitude\", \"Latitude\", \"BusStopName\"))) -> busstops_subset.df\n\nbusstops_subset.df$BusStopName <- factor(busstops_subset.df$BusStopName)\nstr(busstops_subset.df)\n\n## Find busstops near the stores and subset dataset to those\n\n# set the projection of the stores to projection of bus-stops\nproj4string(stores.sp) <- proj4string(busstops_subset)\n\n# get the nearest neighbour for each store among the bus stops\nsnap <- apply(spDists(stores.sp, busstops_subset), 1, which.min)\n# returns a vector of indices with length = number of stores\n\n# get only those bus-stops which are nearest to any of the stores\nbusstops_nearest <- busstops_subset.df[unique(snap),]\nbusstops_nearest.sp <-busstops_subset[unique(snap),]\n\n# attach BusStopID of the nearest bus stop to the stores data\nstores <- cbind(stores,busstops_subset.df[snap,\"BusStopID\"])\nnames(stores) <- c(\"StoreID\", \"Longitude\", \"Latitude\", \"Group\",\"Labels\",\"BusStopID\")\nhead(stores)\n\n# TO DO: Find buslines at the selected bus stops\n\n# Export selected bus-stops\nwrite.table(x = busstops_nearest, file = \"Data/busstops_near.csv\",sep = \",\", dec = \".\")\n\n# Export store data with BusStopID\nwrite.table(x = stores, file = \"Data/stores_busstops.csv\",sep = \",\", dec = \".\")\n",
    "created" : 1469802318963.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "290038136",
    "id" : "CB323790",
    "lastKnownWriteTime" : 1470399214,
    "last_content_update" : 1470399214217,
    "path" : "C:/Users/Nadja/8-Freising/05_Tagungen_Workshops/GfÃ–-Tagung 2016/Vizualization_Award/Data_preparation.R",
    "project_path" : "Data_preparation.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}