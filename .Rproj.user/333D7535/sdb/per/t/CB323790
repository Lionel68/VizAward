{
    "collab_server" : "",
    "contents" : "########################################################################################\n#                                    # # #                                             #\n#This file is used to prepare the final data used in the shiny application             #\n#code written by Lionel R. Hertzog and Nadja Simmons\n\n#Updated: 17.08.2016\n########################################################################################\n\n\nlibrary(plyr)\nlibrary(dplyr)\nlibrary(tidyr) # more data management\n\n# Import the templates\n\nbusstop_tmp <- read.csv(\"Data/template_busstop.csv\", sep = \",\")\nstores_tmp <- read.csv(\"Data/template_stores.csv\", sep = \",\")\n\n# look at the templates\nstr(busstop_tmp)\n# $ BusStopID  : int  1 2 3 4\n# $ Longitude  : int  11 11 10 10\n# $ Latitude   : int  1 2 1 2\n# $ BusStopName: Factor w/ 4 levels \"Hbf\",\"Markplatz\",..: 2 1 3 4\n# $ NbBusLine  : int  2 5 1 1\n# $ BusLine    : Factor w/ 4 levels \"1-2\",\"1-2-3-4-5\",..: 1 2 3 4\nstr(stores_tmp)\n# $ StoreID  : int  1 2 3 4\n# $ Longitude: int  11 11 10 10\n# $ Latitude : int  1 2 1 2\n# $ Group    : Factor w/ 4 levels \"A\",\"B\",\"C\",\"D\": 1 2 3 4\n# $ Labels   : Factor w/ 4 levels \"Am Adler\",\"Mensa\",..: 2 1 3 4\n# $ BusStopID: int  1 1 1 1\n\n### I. Prepare the store data\nstr(csv_file.df)\n# $ latitude       : num  50.8 50.8 50.8 50.8 50.8 ...\n# $ longitude      : num  8.77 8.77 8.76 8.79 8.77 ...\n# $ elevation_m_asl: int  212 183 192 270 185 184 186 185 187 190 ...\n# $ name           : Factor w/ 334 levels \"5 Jahreszeiten\",..: 6 11 13 13 13 13 21 58 74 76 ...\n# $ street         : Factor w/ 110 levels \"Affoellerstr.\",..: 76 88 10 40 58 85 5 42 20 24 ...\n# $ street_no      : Factor w/ 106 levels \"\",\"01. Jun\",\"05. Jul\",..: 9 65 1 102 63 80 5 11 97 12 ...\n# $ zip_code       : int  35037 35037 35037 35039 35039 35037 35041 35037 35037 35037 ...\n# $ city           : Factor w/ 4 levels \"Marburg\",\"Marburg-Cappel\",..: 1 1 1 1 1 1 1 1 1 1 ...\n# $ tel            : Factor w/ 16 levels \"\",\"06421-144 44\",..: 1 1 1 1 1 1 1 1 1 1 ...\n# $ category       : Factor w/ 11 levels \"accomodation\",..: 7 7 7 7 7 7 7 7 7 7 ...\n\n# Some columns are already as we need them, some are unnecessary\n# Clean up the data using the tbl class used by dplyr and tidyr\ncsv_file.tbl <- tbl_df(csv_file.df)\ncsv_file.tbl %>% mutate(StoreID = paste(\"Store\",row.names(csv_file.df),sep = \"_\")) %>%\n  mutate(Longitude = longitude) %>% mutate(Latitude = latitude) %>% mutate(Group = category) %>%\n  mutate(Labels = name) %>%\n  dplyr::select(one_of(c(\"StoreID\",\"Longitude\", \"Latitude\", \"Group\",\"Labels\"))) -> stores\n\n#rename some categories\nstores$Group<-as.character(stores$Group)\nstores$Group[stores$Group==\"food\"]<-\"supermarket\"\nstores$Labels<-as.character(stores$Labels)\n#remove bad names\nstores<-stores[validUTF8(stores$Labels),]\nstores<-stores[validEnc(stores$Labels),]\n\n#remove category other essentials\nstores<-subset(stores,Group!=\"other_essentials\")\n#remove duplicated points\nstores<-stores[-which(duplicated(stores[,c(\"Longitude\",\"Latitude\")])),]\n\n# Repeat selection of spatialPointsDataframe\ncsv.spdf[validUTF8(as.character(csv.spdf$name)),] -> stores.sp\nstores.sp[validUTF8(as.character(stores.sp$name)),] -> stores.sp\n\n#remove category other essentials\nstores.sp<-subset(stores.sp,stores.sp$category!=\"other_essentials\")\n#remove duplicated points\nstores.sp<-stores.sp[-which(duplicated(stores.sp@coords[,c(\"longitude\",\"latitude\")])),]\n\n###--------------------------------------------------------------------------------------\n### II. Prepare the bus stop data\n\n# Look at the busstop data\nstr(busstops_sel)\nhead(busstops_sel@coords)\ndim(busstops_sel@coords)\n\n# Remove busstops without proper names\nbusstops_sel[substr(busstops_sel$name,1,4)!=\"node\",] -> busstops_subset\ndim(busstops_subset@coords)\n\n# convert into data.frame\nbusstops_subset.df <- as.data.frame(busstops_subset)\nstr(busstops_subset.df)\n\n# Clean up the data using the tbl class used by dplyr and tidyr\nbusstops_subset.df %>% mutate(BusStopID = paste(\"Stop\",row.names(busstops_subset.df),sep = \"_\")) %>%\n  mutate(Longitude = coords.x1) %>% mutate(Latitude = coords.x2 ) %>%\n  mutate(BusStopName = name) %>%\n  dplyr::select(one_of(c(\"BusStopID\",\"Longitude\", \"Latitude\", \"BusStopName\"))) -> busstops_subset.df\n\n# Convert bus stop names to character for corrections\nbusstops_subset.df$BusStopName <- as.character(busstops_subset.df$BusStopName)\n\nstr(busstops_subset.df)\n\n###-------------------------------------------------------------------------------------\n### III. Find busstops near the stores and subset dataset to those\n\n# set the projection of the stores to projection of bus-stops\nproj4string(stores.sp) <- proj4string(busstops_subset)\n\n# get the nearest neighbour for each store among the bus stops\nsnap <- apply(spDists(stores.sp, busstops_subset), 1, which.min)\n# returns a vector of indices with length = number of stores\n\n# get only those bus-stops which are nearest to any of the stores\nbusstops_nearest <- busstops_subset.df[unique(snap),]\nbusstops_nearest.sp <-busstops_subset[unique(snap),]\n\n#correct bus stop name \"Marburg\"\nbusstops_nearest[6,\"BusStopName\"]<-\"Pommernweg\"\nbusstops_nearest[42,\"BusStopName\"]<-\"Elisabethenhof\"\nbusstops_nearest[74,\"BusStopName\"]<-\"Ginseldorfer Weg\"\nbusstops_nearest[33,\"BusStopName\"]<-\"Afföllerstraße\"\nbusstops_nearest[13,\"BusStopName\"]<-\"Am Kaufmarkt\"\nbusstops_nearest<-busstops_nearest[-which(busstops_nearest$BusStopName==\"Marburg\"),]\n\n#average coords for bus stops with multiple lines (like Hauptbahnof, A1)\n\nbusstops_nearest$Name2<-sapply(strsplit(busstops_nearest$BusStopName,split = \",\"),function(x) x[1])\nbusstops_nearest[busstops_nearest$Name2==\"Marburg\",\"Name2\"]<-\"Marburg, Fernbusstation\"\n\n###-------------------------------------------------------------------------------------\n### IV. Find buslines at the selected bus stops\n\n# Add column to identify the buslines for each stop\n\nbusstops_nearest <- cbind(busstops_nearest, NbBusLine = 0, BusLine = \"L\",stringsAsFactors=FALSE)\n# make sure that BusLine is not a factor but a character\nstr(busstops_nearest)\n\n# # for each bus line, search for those bus stops in the selection which are part of their route\n# for (i in 1:length(bus_line_list)){\n#   stops <- which(busstops_nearest.sp$name%in%bus_line_list[[i]]@data$name)\n#   busstops_nearest[stops,\"NbBusLine\"] <- busstops_nearest[stops,\"NbBusLine\"]+1\n#   busstops_nearest[stops,\"BusLine\"] <- paste(busstops_nearest[stops,\"BusLine\"],as.character(i),sep = \"-\")\n# }\n### This does not work once the names of bus stops are corrected!\n\n###################\n#Alternative way\n#########\n#using gIntersection\n#find which bus stops intersect with which lines\nbus_sp<-busstops_nearest\ncoordinates(bus_sp)<-bus_sp[,c(\"Longitude\",\"Latitude\")]\nproj4string(bus_sp)<-proj4string(bus_line_list[[1]])\n\nbusstops_nearest$Lines<-\"L\"\nfor(i in 1:10){\n  tmp<-gIntersection(bus_line_list[[i]],bus_sp)\n  busstops_nearest[busstops_nearest$Longitude%in%coordinates(tmp)[,1],\"Lines\"]<-paste(busstops_nearest[busstops_nearest$Longitude%in%coordinates(tmp)[,1],\"Lines\"],i,sep=\"-\")\n}\n\n# Remove bus stops which do not belong to a bus line\nbusstops_nearest %>% filter(Lines !=\"L\") -> busstops_nearest\n\nstr(busstops_nearest)\n\n###-------------------------------------------------------------------------------------\n### V. Prepare final dataset\n\n# Calculate the average coordinates for bus stations with different platforms\nbusstops_nearest%>%\n  group_by(Name2)%>%\n  summarise(Longitude=mean(Longitude),Latitude=mean(Latitude),Lines=toString(Lines))->busstop_new\n\nhead(busstop_new)\n\n# Recalculate the nearest neighbour for each store among the new bus stops\nclass(busstop_new) <- \"data.frame\"\nbusstop_new.sp <- SpatialPointsDataFrame(busstop_new[,c(\"Longitude\",\"Latitude\")], \n                                   data = busstop_new)\nproj4string(busstop_new.sp) <- proj4string(stores.sp)\n\nsnap_new <- apply(spDists(stores.sp, busstop_new.sp), 1, which.min)\n\n# attach BusStopID of the nearest bus stop to the stores data\nstores <- cbind(stores,busstop_new[snap_new,\"Name2\"])\nnames(stores) <- c(\"StoreID\", \"Longitude\", \"Latitude\", \"Group\",\"Labels\",\"Name2\")\nhead(stores)\n\nbusstop_new$BusStopID<-paste(\"Stop\",1:nrow(busstop_new))\n\n#add link to HTML page\npages<-readLines(\"Data/bus_pages.txt\") #this is just a file with the bus stops where extra infos is available\nbusstop_new$Tag<-busstop_new$Name2\n\nfor(i in which(busstop_new$Tag%in%pages)){\n  busstop_new$Tag[i]<-paste0(\"<b><a href='http://stadtwerke-marburg.de/fileadmin/media/stadtverkehr/haltest/\",busstop_new[i,\"Tag\"],\".pdf'>\",busstop_new[i,\"Tag\"],\"</a></b>\")\n}\n\nbusstop_new$Tag[busstop_new$Name2==\"Botanischer Garten\"]<-\"<b><a href='http://stadtwerke-marburg.de/fileadmin/media/stadtverkehr/haltest/Botanischer_Garten.pdf'>Botanischer Garten</a></b>\"\nbusstop_new$Tag[busstop_new$Name2==\"Marburg-BahnhofstraÃŸe\"]<-\"<b><a href='http://stadtwerke-marburg.de/fileadmin/media/stadtverkehr/haltest/Bahnhofstraße.pdf'>Bahnhofstraße</a></b>\"\nbusstop_new$Tag[busstop_new$Name2==\"Rudolphsplatz\"]<-\"<b><a href='http://stadtwerke-marburg.de/fileadmin/media/stadtverkehr/haltest/Rudolphsplatz_Stadthalle.pdf'>Rudolphplatz</a></b>\"\n\nbus_sp<-as.data.frame(busstop_new)\ncoordinates(bus_sp)<-bus_sp[,c(\"Longitude\",\"Latitude\")]\nproj4string(bus_sp)<-proj4string(bus_line_list[[1]])\n\n\n###-------------------------------------------------------------------------------------\n### VI. First look at the results\n\nbusline_colors <- c(\"#a6cee3\",\"#1f78b4\",\"#b2df8a\",\"#33a02c\",\"#fb9a99\",\"#e31a1c\",\n                    \"#fdbf6f\",\"#ff7f00\",\"#cab2d6\",\"#6a3d9a\")\n# those colors were selected from http://colorbrewer2.org/\n  \nplot(Hesse_roads_sel, lwd = 2, col = \"lightgrey\")\nfor (i in 1: 10){\n  plot(bus_line_list[[i]], col = busline_colors[i], add = T)\n}\n\n###-------------------------------------------------------------------------------------\n### VI. Export the data\n\n# Export selected bus-stops\nwrite.table(x = busstops_nearest, file = \"Data/busstops_near.csv\",sep = \",\", dec = \".\",row.names = F)\n\n# Export store data with BusStopID\nwrite.table(x = stores, file = \"Data/stores_busstops.csv\",sep = \",\", dec = \".\",row.names = F)\n\n# Export the spatial objects of the bus lines\nsave(bus_line_list, file =\"Data/bus_line_list.RData\")\n\nsave(busroute_1_shp, file = \"Data/busroute_1_shp.RData\")\nsave(busroute_2_shp, file = \"Data/busroute_2_shp.RData\")\nsave(busroute_3_shp, file = \"Data/busroute_3_shp.RData\")\nsave(busroute_4_shp, file = \"Data/busroute_4_shp.RData\")\nsave(busroute_5_shp, file = \"Data/busroute_5_shp.RData\")\nsave(busroute_6_shp, file = \"Data/busroute_6_shp.RData\")\nsave(busroute_7_shp, file = \"Data/busroute_7_shp.RData\")\nsave(busroute_8_shp, file = \"Data/busroute_8_shp.RData\")\nsave(busroute_9_shp, file = \"Data/busroute_9_shp.RData\")\nsave(busroute_10_shp, file = \"Data/busroute_10_shp.RData\")\n",
    "created" : 1469802318963.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4097839203",
    "id" : "CB323790",
    "lastKnownWriteTime" : 1471606528,
    "last_content_update" : 1471606528724,
    "path" : "C:/Users/Nadja/8-Freising/05_Tagungen_Workshops/GfÖ-Tagung 2016/Vizualization_Award/Data_preparation.R",
    "project_path" : "Data_preparation.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}