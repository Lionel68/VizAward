{
    "collab_server" : "",
    "contents" : "########################################################################################\n#                                    # # #                                             #\n#This file is used to create a static visualization of the data for presentation       #\n#code written by Lionel R. Hertzog and Nadja Simmons\n\n#Updated: 17.08.2016\n########################################################################################\n\n# Installing the development version of the leaflet package from github\nlibrary(devtools)\ninstall_github(\"rstudio/leaflet\")\n####\n\nlibrary(leaflet)\nlibrary(plyr)\nlibrary(dplyr)\nlibrary(viridis) # to make color palette\n\n## We want to save the map as png\n # Solution from StackOverflow: http://stackoverflow.com/questions/31336898/how-to-save-leaflet-in-rstudio-map-as-png-or-jpg-file\n # Note: PhantomJS needs to be downloaded from http://phantomjs.org/ to c:/Users/AppData/Roaming/PhantomJS\n\n## install 'webshot' package\ninstall_github(\"wch/webshot\")\n\n## load packages\nlibrary(htmlwidgets)\nlibrary(webshot)\n# install the downloaded PhantomJS\nwebshot::install_phantomjs()\n\n## Making the map\n#color palette for the bus line or use busline_colors\ncol_line <- colorFactor(viridis(length(bus_line_list)),as.character(1:length(bus_line_list)))\nopacity_bus_lines <- 0.3\n\nnames(bus_line_list) <- c(1:length(bus_line_list))\n\n# create icons with the leaflet package\nicon_uni<-makeAwesomeIcon(icon=\"university\",library=\"fa\",markerColor=\"red\",iconColor=\"white\")\nicon_bus<-makeAwesomeIcon(icon=\"bus\",library = \"fa\",markerColor=\"darkblue\",iconColor=\"white\")\n\nicons<-awesomeIconList(\n  bar_pub_bistro=makeAwesomeIcon(icon = \"beer\",library = \"fa\",markerColor = \"white\",iconColor = \"#8dd3c7\"),\n  restaurant=makeAwesomeIcon(icon = \"cutlery\",library = \"fa\",markerColor = \"white\",iconColor = \"#e6e600\"),\n  supermarket=makeAwesomeIcon(icon=\"shopping-cart\",library = \"glyphicon\",markerColor = \"white\",iconColor = \"#bebada\"),\n  pharmacy=makeAwesomeIcon(icon=\"medkit\",library=\"fa\",markerColor = \"white\",iconColor=\"#fb8072\"),\n  accomodation=makeAwesomeIcon(icon=\"building-o\",library=\"fa\",markerColor = \"white\",iconColor = \"#80b1d3\"),\n  bakery=makeAwesomeIcon(icon=\"grain\",library=\"glyphicon\",markerColor = \"white\",iconColor=\"#fdb462\"),\n  cafe=makeAwesomeIcon(icon=\"coffee\",library=\"fa\",markerColor = \"white\",iconColor=\"#b3de69\"),\n  imbiss=makeAwesomeIcon(icon=\"pizza\",library=\"ion\",markerColor = \"white\",iconColor=\"#d90d76\"),\n  taxi=makeAwesomeIcon(icon=\"taxi\",library=\"fa\",markerColor = \"white\",iconColor = \"#737373\")\n) \n\ncircle_color <- colorFactor(palette = c(\"#80b1d3\",\"#fdb462\",\"#8dd3c7\",\"#b3de69\",\"#d90d76\",\"#fb8072\",\"#e6e600\",\"#bebada\",\"#737373\"), \n                            domain = c(\"accomodation\",\"bakery\",\"bar_pub_bistro\",\"cafe\",\"imbiss\",\n                                       \"pharmacy\",\"restaurant\",\"supermarket\",\"taxi\"))\n\n# Create labels and colors for legend\nstores %>% mutate(legend_labels = Group) %>% \n  mutate(legend_labels = ifelse(legend_labels %in% \"bar_pub_bistro\",\"bar/pub/bistro\",legend_labels)) -> stores\n\nlegend_color <- colorFactor(palette = c(\"#80b1d3\",\"#fdb462\",\"#8dd3c7\",\"#b3de69\",\"#d90d76\",\"#fb8072\",\"#e6e600\",\"#bebada\",\"#737373\"), \n                            domain = c(\"accomodation\",\"bakery\",\"bar/pub/bistro\",\"cafe\",\"imbiss\",\n                                       \"pharmacy\",\"restaurant\",\"supermarket\",\"taxi\"))\n\n# Important: Define the palette alphabetically!\n\n# create a dataframe for the lines connecting store markers and bus stops\nstores_lines <- stores\n\nfor (i in 1: nrow(stores)) {\nstores_lines$Longitude[i] <- busstop_new[busstop_new$Name2 == as.character(stores_lines$Name2)[i],\"Longitude\"]\nstores_lines$Latitude[i] <- busstop_new[busstop_new$Name2 == as.character(stores_lines$Name2)[i],\"Latitude\"]\n}\n\nstores_lines <- rbind(stores_lines,stores)\n\n# create the static map\n\nleaflet() %>%\n  addTiles(\"https://api.mapbox.com/styles/v1/mapbox/streets-v9/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1IjoibGlvbmVsNjgiLCJhIjoiY2lyOHVtY2ZqMDAycmlsbHd3cXF4azhzdiJ9.FHJtGBW1bhjCr-JLnC4brw\") %>%\n  setView(lng=8.773500, lat=50.810600,zoom = 15) %>%\n  addAwesomeMarkers(data=busstop_new,lng=~Longitude,lat=~Latitude,label=~Name2,icon=icon_bus)%>%\n  \n  addPolylines(data=bus_line_list[[1]],stroke=TRUE,color=col_line(1),noClip=FALSE,opacity = opacity_bus_lines)%>%\n  addPolylines(data=bus_line_list[[2]],stroke=TRUE,color=col_line(2),noClip=FALSE,opacity = opacity_bus_lines)%>%\n  addPolylines(data=bus_line_list[[3]],stroke=TRUE,color=col_line(3),noClip=FALSE,opacity = opacity_bus_lines)%>%\n  addPolylines(data=bus_line_list[[4]],stroke=TRUE,color=col_line(4),noClip=FALSE,opacity = opacity_bus_lines)%>%\n  addPolylines(data=bus_line_list[[5]],stroke=TRUE,color=col_line(5),noClip=FALSE,opacity = opacity_bus_lines)%>%\n  addPolylines(data=bus_line_list[[6]],stroke=TRUE,color=col_line(6),noClip=FALSE,opacity = opacity_bus_lines)%>%\n  addPolylines(data=bus_line_list[[7]],stroke=TRUE,color=col_line(7),noClip=FALSE,opacity = opacity_bus_lines)%>%\n  addPolylines(data=bus_line_list[[8]],stroke=TRUE,color=col_line(8),noClip=FALSE,opacity = opacity_bus_lines)%>%\n  addPolylines(data=bus_line_list[[9]],stroke=TRUE,color=col_line(9),noClip=FALSE,opacity = opacity_bus_lines)%>%\n  addPolylines(data=bus_line_list[[10]],stroke=TRUE,color=col_line(10),noClip=FALSE,opacity = opacity_bus_lines) %>%\n  addCircleMarkers(data=stores,radius =10,stroke = TRUE, color = \"white\", fillColor = ~circle_color(Group),fillOpacity = 0.9) -> static_map\n\n# Add lines between points and stops\n  for(i in 1:length(unique(stores_lines$StoreID))){\n    store_name <- unique(stores_lines$StoreID)[i]\n    static_map <- addPolylines(static_map, \n                          lat = c(as.numeric(stores_lines[stores_lines$StoreID==store_name, \"Latitude\"])), \n                          lng = c(as.numeric(stores_lines[stores_lines$StoreID==store_name, \"Longitude\"])),\n                          color = \"grey\", fillColor = \"grey\", fillOpacity = 0.9, weight = 2)\n  }\n\n# Adding a legend\nstatic_map <- static_map %>% addLegend(\"bottomright\", pal = legend_color, values = stores$legend_labels,\n                                   title = \"Stores and other amenities\",\n                                   opacity = 1)\n# Adding a legend for the bus icon\nhtml_legend <- \"<span>\n  <i class='fa fa-bus icon-white'></i>\n</span></i>nearest bus stop\" \n\n\nstatic_map <- static_map %>% addControl(html = html_legend, position = \"topright\")\n\n# Saving the static map as png\n\nsaveWidget(static_map, \"static_map_temp.html\", selfcontained = FALSE)\nwebshot(\"static_map_temp.html\", file = \"static_map.png\",\n        cliprect = \"viewport\")\n",
    "created" : 1471448801502.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1136248911",
    "id" : "E03B2E9B",
    "lastKnownWriteTime" : 1471849392,
    "last_content_update" : 1471849392,
    "path" : "C:/Users/Nadja/8-Freising/05_Tagungen_Workshops/Gf√ñ-Tagung 2016/Vizualization_Award/Static_map.R",
    "project_path" : "Static_map.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}