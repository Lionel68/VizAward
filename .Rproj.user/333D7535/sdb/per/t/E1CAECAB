{
    "collab_server" : "",
    "contents" : "########################################################################################\n#                                    # # #                                             #\n#This file is used to import the raw data on localities and the geographic information #\n#code written by Lionel R. Hertzog and Nadja Simmons\n\n#Updated: 28.07.2016\n########################################################################################\n\n## Loading vector data\n\n# vector data are represented by the sp package with three classes:\n# SpatialPoints / SpatialPolygons / SpatialLines\n\n# input of vector data with rgdal::readOGR()\n\nlibrary(plyr) # data handling\nlibrary(dplyr) # more data handling, piping (%>%)\n\nlibrary(sp)   # spatial objects\nlibrary(maps) # free maps of the world\nlibrary(mapdata) # world maps\nlibrary(RgoogleMaps) # get google maps\nlibrary(raster)  # raster data\nlibrary(rgdal)  # input/output, projections\nlibrary(rgeos)  # geometry operations\n\n# Import data on localities in Marburg\ncsv_file <- read.csv(\"Data/Marburg_data.csv\",sep=\";\")\ncsv_file.df <- as.data.frame(csv_file)\nhead(csv_file.df)\nsummary(csv_file.df) \n\n# Create a spatial object from the csv data\ncsv.spdf <- SpatialPointsDataFrame(csv_file.df[,c(\"longitude\",\"latitude\")], \n                                        data = csv_file.df)\n\n# What is the extend of the data points?\nbbox(csv.spdf)\n# min      max\n# longitude  8.68925  8.81454\n# latitude  50.77004 50.84380\n\n# Create a raster file which marks the area of interest and is used to crop the other spatial data\nmarburg_area = extent(raster(xmn = 8.6893, xmx = 8.8145, ymn = 50.7700, ymx = 50.8437))\n\n# GetMap.bbox(c(8.6,8.9),c(50.7,50.9)) -> marburg_region # Google Maps\n\n# manually download a map of Hesse from http://download.geofabrik.de/europe/germany/hessen.html\n# hessen-latest-shp.zip -> unzip to:\n# folder \"VizAward_Data\" which is on the same level as the current directory\n\nHesse_roads <- readOGR(\"../VizAward_Data/hessen-latest.shp\",\"roads\") # this takes some time\n\n# only select roads in the Marburg area\nHesse_roads_sel = crop(Hesse_roads, marburg_area)\n\nrm(Hesse_roads) # make space in the environment\n\n# Export of bus route information from OpenStreetMap at http://overpass-turbo.eu/\n# Go to the above url -> copy-paste the code below into the white box on the left (show via Wizard)\n# -> run the query -> export in GPX format into the \"VizAward_Data\" folder\n\n# <osm-script output=\"json\" timeout=\"25\">\n#   <union>\n#   <query type=\"relation\">\n#   <has-kv k=\"route\" v=\"bus\"/>\n#   <bbox-query e=\"8.895492553710938\" n=\"50.85288349328369\" s=\"50.75568091033749\" w=\"8.636970520019531\"/>\n#   </query>\n#   <recurse type=\"relation-way\"/>\n#   <recurse type=\"way-node\"/>\n#   </union>\n#   <print mode=\"body\"/>\n#   <print mode=\"skeleton\" order=\"quadtile\"/>\n#   </osm-script>\n\n# Import the data on bus routes and stops\nbusroutes_shp <- readOGR(dsn = \"../VizAward_Data/export.gpx\", layer = \"tracks\")\nbusstops_shp <- readOGR(dsn = \"../VizAward_Data/export.gpx\", layer = \"waypoints\")\n\n# We can also import only one bus route by indicating the number in k=\"ref\" v=\"  \"\n\n# Information on single bus routes\n# <osm-script output=\"json\" timeout=\"25\">\n#   <union>\n#   <query type=\"relation\">\n#   <has-kv k=\"ref\" v=\"2\"/>\n#   <bbox-query e=\"8.895492553710938\" n=\"50.85288349328369\" s=\"50.75568091033749\" w=\"8.636970520019531\"/>\n#   </query>\n#   <recurse type=\"relation-way\"/>\n#   <recurse type=\"way-node\"/>\n#   </union>\n#   <print mode=\"body\"/>\n#   <print mode=\"skeleton\" order=\"quadtile\"/>\n#   </osm-script>\n\nbusroute_1_shp <- readOGR(dsn = \"../VizAward_Data/export_Linie1.gpx\", layer = \"tracks\")\nbusroute_2_shp <- readOGR(dsn = \"../VizAward_Data/export_Linie2.gpx\", layer = \"tracks\")\nbusroute_3_shp <- readOGR(dsn = \"../VizAward_Data/export_Linie3.gpx\", layer = \"tracks\")\nbusroute_4_shp <- readOGR(dsn = \"../VizAward_Data/export_Linie4.gpx\", layer = \"tracks\")\nbusroute_5_shp <- readOGR(dsn = \"../VizAward_Data/export_Linie5.gpx\", layer = \"tracks\")\nbusroute_6_shp <- readOGR(dsn = \"../VizAward_Data/export_Linie6.gpx\", layer = \"tracks\")\nbusroute_7_shp <- readOGR(dsn = \"../VizAward_Data/export_Linie7.gpx\", layer = \"tracks\")\nbusroute_8_shp <- readOGR(dsn = \"../VizAward_Data/export_Linie8.gpx\", layer = \"tracks\")\nbusroute_9_shp <- readOGR(dsn = \"../VizAward_Data/export_Linie9.gpx\", layer = \"tracks\")\nbusroute_10_shp <- readOGR(dsn = \"../VizAward_Data/export_Linie10.gpx\", layer = \"tracks\")\n\n# Select only bus routes and bus stops within the area of interest\nbusroutes_sel <- crop(busroutes_shp, marburg_area)\nbusstops_sel <- crop(busstops_shp, marburg_area)\n\nrm(busroutes_shp) # make space in the environment\nrm(busstops_shp) # make space in the environment\n\n# Create plot to check if all spatial data overlap\nplot(Hesse_roads_sel, lwd = 2, col = \"lightgrey\")\nplot(busroutes_sel, col = \"blue\", add = T)\npoints(busstops_sel,col=\"darkblue\", cex = 0.5, pch = 16)\npoints(csv.spdf, col = \"red\", cex = 0.5, pch = 16)\n# This looks very good!",
    "created" : 1469461251060.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "221221808",
    "id" : "E1CAECAB",
    "lastKnownWriteTime" : 1470409713,
    "last_content_update" : 1470409713577,
    "path" : "C:/Users/Nadja/8-Freising/05_Tagungen_Workshops/GfÃ–-Tagung 2016/Vizualization_Award/Data_import.R",
    "project_path" : "Data_import.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}